/*! For license information please see stories-TodoForm-stories.bcda609a.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunktodo_react=self.webpackChunktodo_react||[]).push([[161],{"./src/stories/TodoForm.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ExampleForm:()=>ExampleForm,__namedExportsOrder:()=>__namedExportsOrder,default:()=>TodoForm_stories});var dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),react=__webpack_require__("./node_modules/react/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function TodoFrom(_ref){let{onChangeForm,onSubmitForm}=_ref;const[value,setValue]=(0,react.useState)("");(0,react.useEffect)((()=>{onChangeForm(value)}),[value,onChangeForm]);return(0,jsx_runtime.jsx)("div",{className:"todo-form",children:(0,jsx_runtime.jsxs)("div",{className:"input-group mb-3",children:[(0,jsx_runtime.jsx)("input",{type:"text",className:"form-control",placeholder:"Your new todo...","aria-label":"todo-input","aria-describedby":"todo-input","data-testid":"todo-input",value,onChange:e=>setValue(e.target.value)}),(0,jsx_runtime.jsx)("button",{className:"btn btn-secondary",type:"button","data-testid":"button-add",disabled:!value,onClick:()=>(onSubmitForm(),void setValue("")),children:"Add"})]})})}TodoFrom.__docgenInfo={description:"Form to add new todo for Todo feature",methods:[],displayName:"TodoFrom",props:{onChangeForm:{required:!0,tsType:{name:"signature",type:"function",raw:"(event: any) => void",signature:{arguments:[{type:{name:"any"},name:"event"}],return:{name:"void"}}},description:"Event handler when input value changes"},onSubmitForm:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Submit handler when clicking btn add"}}};const meta={title:"Todo/TodoForm",component:TodoFrom,parameters:{layout:"centered"},tags:["autodocs"]},mockSubmitHandler=(0,dist.fn)(),TodoForm_stories=meta,ExampleForm={render:function Render(args){const[value,setValue]=(0,react.useState)("");return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsxs)("div",{style:{marginBottom:"8px"},children:["Value: ",value]}),(0,jsx_runtime.jsx)(TodoFrom,{onChangeForm:e=>setValue(e),onSubmitForm:()=>{mockSubmitHandler()}})]})},play:async _ref=>{let{canvasElement}=_ref;const canvas=(0,dist.ux)(canvasElement),input="Try storybook component test";await dist.Q4.type(canvas.getByTestId("todo-input"),input),await(0,dist.E3)(canvas.getByText(input,{exact:!1})).toBeInTheDocument(),await dist.Q4.click(canvas.getByTestId("button-add")),await(0,dist.E3)(mockSubmitHandler).toHaveBeenCalled()}},__namedExportsOrder=["ExampleForm"];ExampleForm.parameters={...ExampleForm.parameters,docs:{...ExampleForm.parameters?.docs,source:{originalSource:'{\n  render: function Render(args) {\n    const [value, setValue] = useState("");\n    return <div>\n        <div style={{\n        marginBottom: "8px"\n      }}>Value: {value}</div>\n        <TodoForm onChangeForm={(e: any) => setValue(e)} onSubmitForm={() => {\n        mockSubmitHandler();\n      }} />\n      </div>;\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = "Try storybook component test";\n    await userEvent.type(canvas.getByTestId("todo-input"), input);\n    await expect(canvas.getByText(input, {\n      exact: false\n    })).toBeInTheDocument();\n    await userEvent.click(canvas.getByTestId("button-add"));\n    await expect(mockSubmitHandler).toHaveBeenCalled();\n  }\n}',...ExampleForm.parameters?.docs?.source}}}},"./node_modules/react/cjs/react-jsx-runtime.production.js":(__unused_webpack_module,exports)=>{var REACT_ELEMENT_TYPE=Symbol.for("react.transitional.element"),REACT_FRAGMENT_TYPE=Symbol.for("react.fragment");function jsxProd(type,config,maybeKey){var key=null;if(void 0!==maybeKey&&(key=""+maybeKey),void 0!==config.key&&(key=""+config.key),"key"in config)for(var propName in maybeKey={},config)"key"!==propName&&(maybeKey[propName]=config[propName]);else maybeKey=config;return config=maybeKey.ref,{$$typeof:REACT_ELEMENT_TYPE,type,key,ref:void 0!==config?config:null,props:maybeKey}}exports.Fragment=REACT_FRAGMENT_TYPE,exports.jsx=jsxProd,exports.jsxs=jsxProd},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.js")}}]);